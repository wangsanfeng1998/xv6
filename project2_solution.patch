diff --git a/include/syscall.h b/include/syscall.h
index c55cec2..472c26d 100644
--- a/include/syscall.h
+++ b/include/syscall.h
@@ -23,5 +23,7 @@
 #define SYS_sbrk   19
 #define SYS_sleep  20
 #define SYS_uptime 21
+#define SYS_shmem_access 22
+#define SYS_shmem_count 23
 
 #endif // _SYSCALL_H_
diff --git a/kernel/defs.h b/kernel/defs.h
index c12f8ff..4156347 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -168,6 +168,11 @@ pde_t*          copyuvm(pde_t*, uint);
 void            switchuvm(struct proc*);
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
+void            shmem_init(void);
+int             shmem_count(int);
+void*           shmem_access(int);
+void            freeshmems(struct proc*);
+void            forkshmems(struct proc*);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kernel/exec.c b/kernel/exec.c
index 05f80f8..1ea1757 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -32,7 +32,7 @@ exec(char *path, char **argv)
     goto bad;
 
   // Load program into memory.
-  sz = 0;
+  sz = PGSIZE;
   for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
     if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
       goto bad;
diff --git a/kernel/main.c b/kernel/main.c
index e9dc44c..fd700f0 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -60,8 +60,10 @@ mainc(void)
 
   // Finish setting up this processor in
   cinit();
+  //shmem_init();    // initialize shared memory data structures
   sti();           // enable inturrupts
   userinit();      // first user process
+  shmem_init();
   scheduler();     // start running processes
 }
 
diff --git a/kernel/mmu.h b/kernel/mmu.h
index 3b6286f..3babc43 100644
--- a/kernel/mmu.h
+++ b/kernel/mmu.h
@@ -118,6 +118,7 @@ struct segdesc {
 
 #define PGSIZE		4096		// bytes mapped by a page
 #define PGSHIFT		12		// log2(PGSIZE)
+#define MAXPGS           4              // maximum number of shared memory pages 
 
 #define PTXSHIFT	12		// offset of PTX in a linear address
 #define PDXSHIFT	22		// offset of PDX in a linear address
diff --git a/kernel/proc.c b/kernel/proc.c
index 8e20984..7e01457 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -67,6 +67,10 @@ found:
   p->context = (struct context*)sp;
   memset(p->context, 0, sizeof *p->context);
   p->context->eip = (uint)forkret;
+  
+   p->num_shmems = 0;
+  int  i;
+  for (i = 0; i < MAXPGS; i++) p->shmems[i] = NULL;
 
   return p;
 }
@@ -156,6 +160,11 @@ fork(void)
   pid = np->pid;
   np->state = RUNNABLE;
   safestrcpy(np->name, proc->name, sizeof(proc->name));
+  
+  np->num_shmems = proc->num_shmems;
+  for (i = 0; i < MAXPGS; i++) np->shmems[i] = proc->shmems[i];
+  forkshmems(np);
+  
   return pid;
 }
 
@@ -196,6 +205,7 @@ exit(void)
     }
   }
 
+ freeshmems(proc);
   // Jump into the scheduler, never to return.
   proc->state = ZOMBIE;
   sched();
diff --git a/kernel/proc.h b/kernel/proc.h
index 7d64023..9af1e18 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -74,6 +74,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  void *shmems[MAXPGS];
+  int num_shmems;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/kernel/syscall.c b/kernel/syscall.c
index 28c8308..d3bc491 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -103,6 +103,8 @@ static int (*syscalls[])(void) = {
 [SYS_wait]    sys_wait,
 [SYS_write]   sys_write,
 [SYS_uptime]  sys_uptime,
+[SYS_shmem_access] sys_shmem_access,
+[SYS_shmem_count] sys_shmem_count,
 };
 
 // Called on a syscall trap. Checks that the syscall number (passed via eax)
diff --git a/kernel/sysfunc.h b/kernel/sysfunc.h
index ee9dafd..2ec3fdf 100644
--- a/kernel/sysfunc.h
+++ b/kernel/sysfunc.h
@@ -23,5 +23,7 @@ int sys_unlink(void);
 int sys_wait(void);
 int sys_write(void);
 int sys_uptime(void);
+int sys_shmem_access(void);
+int sys_shmem_count(void);
 
 #endif // _SYSFUNC_H_
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 82b54f9..d182b7f 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -88,3 +88,19 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int
+sys_shmem_access(void)
+{
+  int page_number;
+  if(argint(0, &page_number) < 0) return -1; // return an error
+  return (int)shmem_access(page_number);
+}
+
+int
+sys_shmem_count(void)
+{
+  int page_number;
+  if(argint(0, &page_number) < 0) return -1; // return an error 
+  return (int)shmem_count(page_number);
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 54d4bf4..155e435 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -10,6 +10,10 @@ extern char data[];  // defined in data.S
 
 static pde_t *kpgdir;  // for use in scheduler()
 
+int shmems_counter[MAXPGS];
+void *shmems_address[MAXPGS];
+
+
 // Allocate one page table for the machine for the kernel address
 // space for scheduler processes.
 void
@@ -231,11 +235,15 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
   char *mem;
   uint a;
 
-  if(newsz > USERTOP)
+  if(newsz + PGSIZE * (1 + proc->num_shmems)> USERTOP)
     return 0;
   if(newsz < oldsz)
     return oldsz;
 
+  if (oldsz == 0 || oldsz < PGSIZE) {
+    oldsz = PGSIZE;
+  }
+
   a = PGROUNDUP(oldsz);
   for(; a < newsz; a += PGSIZE){
     mem = kalloc();
@@ -244,7 +252,7 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
       deallocuvm(pgdir, newsz, oldsz);
       return 0;
     }
-    memset(mem, 0, PGSIZE);
+    memset(mem, 0, PGSIZE); //clearing the page at mem by filling it with all zeroes
     mappages(pgdir, (char*)a, PGSIZE, PADDR(mem), PTE_W|PTE_U);
   }
   return newsz;
@@ -286,7 +294,7 @@ freevm(pde_t *pgdir)
 
   if(pgdir == 0)
     panic("freevm: no pgdir");
-  deallocuvm(pgdir, USERTOP, 0);
+  deallocuvm(pgdir, USERTOP - MAXPGS * PGSIZE, 0);
   for(i = 0; i < NPDENTRIES; i++){
     if(pgdir[i] & PTE_P)
       kfree((char*)PTE_ADDR(pgdir[i]));
@@ -294,6 +302,25 @@ freevm(pde_t *pgdir)
   kfree((char*)pgdir);
 }
 
+void
+freeshmems(struct proc *p) {
+  int i;
+  for (i = 0; i < MAXPGS; i++) {
+    if(p->shmems[i]) {
+      if (shmems_counter[i] == 1 && shmems_address[i]) kfree((char*)shmems_address[i]);
+      shmems_counter[i]--;
+    }    
+  }
+}
+
+void
+forkshmems(struct proc *p) {
+  int i;
+  for (i = 0; i < MAXPGS; i++)
+    if(proc->shmems[i])
+      shmems_counter[i]++;
+}
+
 // Given a parent process's page table, create a copy
 // of it for a child.
 pde_t*
@@ -306,7 +333,7 @@ copyuvm(pde_t *pgdir, uint sz)
 
   if((d = setupkvm()) == 0)
     return 0;
-  for(i = 0; i < sz; i += PGSIZE){
+  for(i = PGSIZE; i < sz; i += PGSIZE){ //change from zero to pgsize
     if((pte = walkpgdir(pgdir, (void*)i, 0)) == 0)
       panic("copyuvm: pte should exist");
     if(!(*pte & PTE_P))
@@ -364,3 +391,59 @@ copyout(pde_t *pgdir, uint va, void *p, uint len)
   }
   return 0;
 }
+
+void 
+shmem_init()
+{
+  // provides the two shared memory data structures with 
+  // their default values 
+  int i; 
+  for(i = 0; i < MAXPGS; i++)
+  {
+    shmems_counter[i] = 0;
+    shmems_address[i] = NULL;
+  }
+}
+
+void*
+shmem_access(int page_number) //this code was taken from the Github user yanhui-yang
+{ 
+  if (page_number < 0 || page_number >= MAXPGS || proc->num_shmems < 0 || proc->num_shmems >= MAXPGS) {
+    return NULL; //if page number is out of range (whether that's above or below), or number of shared memories is negative or beyond 4 pages
+  }
+  if (proc->shmems[page_number]) { //if the process is already capable of accessing the given page
+    if (mappages(proc->pgdir, proc->shmems[page_number], PGSIZE, PADDR(shmems_address[page_number]), PTE_W|PTE_U) < 0) {
+      return NULL; //if there is no room in the page directory, there is an error
+    }
+    return proc->shmems[page_number]; //if the page can already be accessed, we just return it
+  }
+  //make a new pointer to the address to the next page, starting from the top of the virtual address space
+  //for every preceding page, we move further down the virtual address space
+  void *newSharedMemoryPageAddr = (void *)(USERTOP - (proc->num_shmems + 1) * PGSIZE); 
+  //if the address space is already filled, there is an error
+  if (proc->sz >= (int)newSharedMemoryPageAddr) { 
+    return NULL;
+  }
+  //test if there is enough phsyical memory to create a page using the kalloc function
+  if ((shmems_address[page_number] = kalloc()) == 0) {
+    //panic("shmem_access: unable to allocate physical shared memory page");
+  }
+  if (mappages(proc->pgdir, newSharedMemoryPageAddr, PGSIZE, PADDR(shmems_address[page_number]), PTE_W|PTE_U) < 0){
+   return NULL;//again, check if there is room to make a PTE in the page directory
+ }
+  proc->num_shmems++; //increase the number of pages this process is sharing
+  shmems_counter[page_number]++; //increase the number of processes that are sharing this page
+  proc->shmems[page_number] = newSharedMemoryPageAddr; //set the value to point towards the new address
+  return newSharedMemoryPageAddr;
+  
+}
+
+
+int
+shmem_count(int page_number)
+{
+  // if page number is out of range (whether that's above or below), or number of shared memories is negative or beyond 4 pages
+  if(page_number < 0 || page_number >= MAXPGS || proc->num_shmems < 0 || proc->num_shmems >= MAXPGS)
+    return -1;
+  return shmems_counter[page_number];
+}
diff --git a/user/#sharedmem_simpletests.c# b/user/#sharedmem_simpletests.c#
new file mode 100644
index 0000000..4ef5d73
--- /dev/null
+++ b/user/#sharedmem_simpletests.c#
@@ -0,0 +1,248 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+#define USERTOP 0xA0000
+#define PGSIZE 4096
+
+void
+testPassed(void)
+{
+  printf(1, "....Passed\n");
+}
+
+void
+testFailed(void)
+{
+  printf(1, "....FAILED\n");
+}
+
+void expectedVersusActualNumeric(char* name, int expected, int actual)
+{
+  printf(1, "      %s expected: %d, Actual: %d\n", name, expected, actual);
+}
+
+void
+whenRequestingSharedMemory_ValidAddressIsReturned(void)
+{
+  printf(1, "Test: whenRequestingSharedMemory_ValidAddressIsReturned...");
+  char* sharedPage = shmem_access(0);
+  char* highestPage =       (char*)(USERTOP - PGSIZE);
+  char* secondHighestPage = (char*)(USERTOP - 2*PGSIZE);
+  char* thirdHighestPage =  (char*)(USERTOP - 3*PGSIZE);
+  char* fourthHighestPage = (char*)(USERTOP - 4*PGSIZE);
+  
+  if(sharedPage == highestPage ||
+     sharedPage == secondHighestPage ||
+     sharedPage == thirdHighestPage ||
+     sharedPage == fourthHighestPage) {
+    testPassed();
+  } else {
+    testFailed(); 
+  }
+}
+
+void
+afterRequestingSharedMemory_countReturns1()
+{
+  printf(1, "Test: afterRequestingSharedMemory_countReturns1...");
+  char* sharedPage = shmem_access(0);
+  int count = shmem_count(0);
+
+  if(count == 1) {
+    testPassed();
+  } else {
+    testFailed();
+    expectedVersusActualNumeric("'count'", 1, count);
+  }
+
+  // silence the error about unused variable
+  sharedPage = sharedPage + 0;
+}
+
+void
+whenSharingAPage_ParentSeesChangesMadeByChild()
+{
+  printf(1, "Test: whenSharingAPage_ParentSeesChangesMadeByChild...");
+  char* sharedPage = shmem_access(0);
+  sharedPage[0] = 42;
+
+  int pid = fork();
+  if(pid == 0){
+    // in child
+    char* childsSharedPage = shmem_access(0);
+    childsSharedPage[0] = childsSharedPage[0] + 1;
+    exit();
+  } else {
+    // in parent
+    wait(); // wait for child to terminate
+    if(sharedPage[0] == 43){
+      testPassed();
+    } else {
+      testFailed();
+      expectedVersusActualNumeric("'sharedPage[0]'", 43, sharedPage[0]);
+    }
+  }
+}
+
+void
+whenProcessExits_SharedPageIsFreed()
+{
+  printf(1, "Test: whenProcessExits_SharedPageIsFreed...");
+  int pid = fork();
+
+  if(pid == 0){
+    // in child
+    char* sharedPage = shmem_access(0);
+    sharedPage[0] = 42;
+    exit();
+  } else {
+    // in parent
+    wait();
+    char* parentsSharedPage = shmem_access(0);
+    if(parentsSharedPage[0] != 42){
+      testPassed();
+    } else {
+      // should be garbage value after being freed, but it's still 42
+      testFailed();
+      expectedVersusActualNumeric("'parentsSharedPage[0]'", 1, parentsSharedPage[0]);
+    }
+  }
+}
+
+void
+whenSharingAPageBetween2Processes_countReturns2()
+{
+  printf(1, "Test: whenSharingAPageBetween2Processes_countReturns2...");
+
+  char* sharedPage = shmem_access(0);
+  sharedPage = sharedPage + 0;  // silence unused variable error
+
+  int pid = fork();
+
+  if(pid == 0){
+    // in child
+    char* childsSharedPage = shmem_access(0);
+    childsSharedPage = childsSharedPage + 0;  // silence unused variable error
+
+    int count = shmem_count(0);
+    if(count != 2){
+      testFailed();
+      expectedVersusActualNumeric("'count'", 2, count);
+    }
+
+    exit();
+  } else{
+    // in parent
+    wait(); // wait for child to exit
+    int parentsCount = shmem_count(0);
+    if(parentsCount != 1){
+      testFailed();
+      expectedVersusActualNumeric("'parentsCount'", 1, parentsCount);
+    }
+  }
+
+  testPassed();
+}
+
+void
+whenProcessExists_countReturns0()
+{
+  printf(1, "Test: whenProcessExists_countReturns0...");
+
+  int pid = fork();
+
+  if(pid == 0){
+    // in child
+    char* sharedPage = shmem_access(0);
+    sharedPage = sharedPage + 0;  // silence unused variable error
+    exit();
+  } else {
+    // in parent
+    wait();
+    int count = shmem_count(0);
+
+    if(count != 0){
+      testFailed();
+      expectedVersusActualNumeric("'count'", 0, count);
+    } else {
+      testPassed();
+    }
+
+  }
+}
+
+void
+beforeRequestingSharedMemory_countReturns0()
+{
+  printf(1, "Test: beforeRequestingSharedMemory_countReturns0...");
+
+  int count = shmem_count(0);
+
+  if(count != 0){
+    testFailed();
+    expectedVersusActualNumeric("'count'", 0, count);
+  } else {
+    testPassed();
+  }
+}
+
+int
+main(void)
+{
+  int pid;
+
+  // we fork then run each test in a child process to keep the main process
+  // free of any shared memory
+  pid = fork();
+  if(pid == 0){
+    whenRequestingSharedMemory_ValidAddressIsReturned();
+    exit();
+  }
+  wait();
+  
+  pid = fork();
+  if(pid == 0){
+    afterRequestingSharedMemory_countReturns1();
+    exit();
+  }
+  wait();
+
+  pid = fork();
+  if(pid == 0){
+    whenSharingAPage_ParentSeesChangesMadeByChild();
+    exit();
+  }
+  wait();
+
+  pid = fork();
+  if(pid == 0){
+    whenSharingAPageBetween2Processes_countReturns2();
+    exit();
+  }
+  wait();
+
+  pid = fork();
+  if(pid == 0){
+    whenProcessExits_SharedPageIsFreed();
+    exit();
+  }
+  wait();
+
+  pid = fork();
+  if(pid == 0){
+    whenProcessExists_countReturns0();
+    exit();
+  }
+  wait();
+
+  pid = fork();
+  if(pid == 0){
+    beforeRequestingSharedMemory_countReturns0();
+    exit();
+  }
+  wait();
+
+
+  exit();
+}
diff --git a/user/makefile.mk b/user/makefile.mk
index 1441eb8..645433d 100644
--- a/user/makefile.mk
+++ b/user/makefile.mk
@@ -73,7 +73,7 @@ USER_LDFLAGS += --omagic
 USER_LDFLAGS += --entry=main
 
 # location in memory where the program will be loaded
-USER_LDFLAGS += --section-start=.text=0x0
+USER_LDFLAGS += --section-start=.text=0x1000
 
 user/bin:
 	mkdir -p user/bin
diff --git a/user/simpletests.c b/user/simpletests.c
new file mode 100644
index 0000000..539b152
--- /dev/null
+++ b/user/simpletests.c
@@ -0,0 +1,248 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+#define USERTOP 0xA0000
+#define PGSIZE 4096
+
+void
+testPassed(void)
+{
+  printf(1, "....Passed\n");
+}
+
+void
+testFailed(void)
+{
+  printf(1, "....FAILED\n");
+}
+
+void expectedVersusActualNumeric(char* name, int expected, int actual)
+{
+  printf(1, "      %s expected: %d, Actual: %d\n", name, expected, actual);
+}
+
+void
+whenRequestingSharedMemory_ValidAddressIsReturned(void)
+{
+  printf(1, "Test: whenRequestingSharedMemory_ValidAddressIsReturned...");
+  char* sharedPage = shmem_access(0);
+  char* highestPage =       (char*)(USERTOP - PGSIZE);
+  char* secondHighestPage = (char*)(USERTOP - 2*PGSIZE);
+  char* thirdHighestPage =  (char*)(USERTOP - 3*PGSIZE);
+  char* fourthHighestPage = (char*)(USERTOP - 4*PGSIZE);
+  
+  if(sharedPage == highestPage ||
+     sharedPage == secondHighestPage ||
+     sharedPage == thirdHighestPage ||
+     sharedPage == fourthHighestPage) {
+    testPassed();
+  } else {
+    testFailed(); 
+  }
+}
+
+void
+afterRequestingSharedMemory_countReturns1()
+{
+  printf(1, "Test: afterRequestingSharedMemory_countReturns1...");
+  char* sharedPage = shmem_access(0);
+  int count = shmem_count(0);
+
+  if(count == 1) {
+    testPassed();
+  } else {
+    testFailed();
+    expectedVersusActualNumeric("'count'", 1, count);
+  }
+
+  // silence the error about unused variable
+  sharedPage = sharedPage + 0;
+}
+
+void
+whenSharingAPage_ParentSeesChangesMadeByChild()
+{
+  printf(1, "Test: whenSharingAPage_ParentSeesChangesMadeByChild...");
+  char* sharedPage = shmem_access(0);
+  sharedPage[0] = 42;
+
+  int pid = fork();
+  if(pid == 0){
+    // in child
+    char* childsSharedPage = shmem_access(0);
+    childsSharedPage[0] = childsSharedPage[0] + 1;
+    exit();
+  } else {
+    // in parent
+    wait(); // wait for child to terminate
+    if(sharedPage[0] == 43){
+      testPassed();
+    } else {
+      testFailed();
+      expectedVersusActualNumeric("'sharedPage[0]'", 43, sharedPage[0]);
+    }
+  }
+}
+
+void
+whenProcessExits_SharedPageIsFreed()
+{
+  printf(1, "Test: whenProcessExits_SharedPageIsFreed...");
+  int pid = fork();
+
+  if(pid == 0){
+    // in child
+    char* sharedPage = shmem_access(0);
+    sharedPage[0] = 42;
+    exit();
+  } else {
+    // in parent
+    wait();
+    char* parentsSharedPage = shmem_access(0);
+    if(parentsSharedPage[0] != 42){
+      testPassed();
+    } else {
+      // should be garbage value after being freed, but it's still 42
+      testFailed();
+      expectedVersusActualNumeric("'parentsSharedPage[0]'", 1, parentsSharedPage[0]);
+    }
+  }
+}
+
+void
+whenSharingAPageBetween2Processes_countReturns2()
+{
+  printf(1, "Test: whenSharingAPageBetween2Processes_countReturns2...");
+
+  char* sharedPage = shmem_access(0);
+  sharedPage = sharedPage + 0;  // silence unused variable error
+
+  int pid = fork();
+
+  if(pid == 0){
+    // in child
+    char* childsSharedPage = shmem_access(0);
+    childsSharedPage = childsSharedPage + 0;  // silence unused variable error
+
+    int count = shmem_count(0);
+    if(count != 2){
+      testFailed();
+      expectedVersusActualNumeric("'count'", 2, count);
+    }
+
+    exit();
+  } else{
+    // in parent
+    wait(); // wait for child to exit
+    int parentsCount = shmem_count(0);
+    if(parentsCount != 1){
+      testFailed();
+      expectedVersusActualNumeric("'parentsCount'", 1, parentsCount);
+    }
+  }
+
+  testPassed();
+}
+
+void
+whenProcessExists_countReturns0()
+{
+  printf(1, "Test: whenProcessExists_countReturns0...");
+
+  int pid = fork();
+
+  if(pid == 0){
+    // in child
+    char* sharedPage = shmem_access(0);
+    sharedPage = sharedPage + 0;  // silence unused variable error
+    exit();
+  } else {
+    // in parent
+    wait();
+    int count = shmem_count(0);
+
+    if(count != 0){
+      testFailed();
+      expectedVersusActualNumeric("'count'", 0, count);
+    } else {
+      testPassed();
+    }
+
+  }
+}
+
+void
+beforeRequestingSharedMemory_countReturns0()
+{
+  printf(1, "Test: beforeRequestingSharedMemory_countReturns0...");
+
+  int count = shmem_count(0);
+
+  if(count != 0){
+    testFailed();
+    expectedVersusActualNumeric("'count'", 0, count);
+  } else {
+    testPassed();
+  }
+}
+
+int
+main(void)
+{
+  int pid;
+
+  // we fork then run each test in a child process to keep the main process
+  // free of any shared memory
+  pid = fork();
+  if(pid == 0){
+    whenRequestingSharedMemory_ValidAddressIsReturned();
+    exit();
+  }
+  wait();
+  
+  pid = fork();
+  if(pid == 0){
+    afterRequestingSharedMemory_countReturns1();
+    exit();
+  }
+  wait();
+
+  pid = fork();
+  if(pid == 0){
+    whenSharingAPage_ParentSeesChangesMadeByChild();
+    exit();
+  }
+  wait();
+
+  pid = fork();
+  if(pid == 0){
+    whenSharingAPageBetween2Processes_countReturns2();
+    exit();
+  }
+  wait();
+
+  pid = fork();
+  if(pid == 0){
+    whenProcessExits_SharedPageIsFreed();
+    exit();
+  }
+  wait();
+
+  pid = fork();
+  if(pid == 0){
+    whenProcessExists_countReturns0();
+    exit();
+  }
+  wait();
+
+  pid = fork();
+  if(pid == 0){
+    beforeRequestingSharedMemory_countReturns0();
+    exit();
+  }
+  wait();
+
+
+  exit();
+}
diff --git a/user/umalloc.c b/user/umalloc.c
index a7e7d2c..e1655dc 100644
--- a/user/umalloc.c
+++ b/user/umalloc.c
@@ -6,85 +6,120 @@
 // Memory allocator by Kernighan and Ritchie,
 // The C programming Language, 2nd ed.  Section 8.7.
 
-typedef long Align;
+typedef long Align;  // for alignment to long boundary
 
-union header {
+union header {  // block header
   struct {
-    union header *ptr;
-    uint size;
+    union header *ptr; // next block, if on free list
+    uint size;         // size of this block
   } s;
-  Align x;
+  Align x;  // force alignment of blocks
 };
 
 typedef union header Header;
 
-static Header base;
-static Header *freep;
+// global variables:
+static Header base;   // the first free list node
+static Header *freep; // start of the free list (head)
 
-void
-free(void *ap)
-{
-  Header *bp, *p;
+// put new block "ap" on the free list because we're done using it
+void free(void *ap) {
+  Header *bp = (Header*)ap - 1;  // the block header
 
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-      break;
+  // Scan through the free list looking for the right place to insert.
+  // Stop when we find a block p that is before the new block,
+  // but the new block is before p's "right neighbor"
+  Header *p;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr) {
+    // There is a special case when the new block belongs at the start or end.
+    // If the scan got to the block with the highest address,
+    // and the new block is > the highest, or < the lowest
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr)) {
+      break;  // block is at the start or end of the range
+    }
+  }
+  // p will become the new block's "left neighbor" so insert after it,
+  // but first check whether to coalesce.
+  
+  // if the end of the new block touches the right neighbor, coalesce-right
   if(bp + bp->s.size == p->s.ptr){
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
+    bp->s.size += p->s.ptr->s.size;  // add the size of the right neighbor
+    bp->s.ptr = p->s.ptr->s.ptr;     // point to the neighbor's neighbor
+  }
+  // if there is a gap to the right, just point to the right neighbor
+  else bp->s.ptr = p->s.ptr;
+
+  // if the end of left neighbor touches the new block's start, coalesce-left
   if(p + p->s.size == bp){
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
-  freep = p;
+    p->s.size += bp->s.size;  // add the new block's size to the left neighbor
+    p->s.ptr = bp->s.ptr;     // make the left neighbor point to the right neighbor
+  }
+  // if there is a gap to the left, the left neighbor points to the new block
+  else p->s.ptr = bp;
+
+  freep = p;  // change the start of the free list, for "next fit" policy
 }
 
-static Header*
-morecore(uint nu)
-{
-  char *p;
-  Header *hp;
+// minumum number of units to request
+#define NALLOC 4096
 
-  if(nu < 4096)
-    nu = 4096;
-  p = sbrk(nu * sizeof(Header));
-  if(p == (char*)-1)
+// ask the OS for more memory
+static Header* morecore(uint nu) {
+  if(nu < NALLOC){  // never ask for just a tiny bit of memory
+    nu = NALLOC;
+  }
+  // sbrk asks the OS to let us use more memory at the end of
+  // the address space and returns a pointer to the beginning
+  // of the new chunk
+  char* p = sbrk(nu * sizeof(Header));
+  // on failure, sbrk will return -1
+  if(p == (char*)-1){
     return 0;
-  hp = (Header*)p;
-  hp->s.size = nu;
-  free((void*)(hp + 1));
+  }
+  Header *hp = (Header*)p;  // cast the new memory as a Header*
+  hp->s.size = nu;  // set up the new header
+  free((void*)(hp + 1));  // add the new memory to the free list
   return freep;
 }
 
-void*
-malloc(uint nbytes)
-{
+// user program's general purpose storage allocator
+void* malloc(uint nbytes) {
   Header *p, *prevp;
-  uint nunits;
 
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  // round up allocation size to fit memory alignment (long)
+  uint nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  // if there is no free list yet, set up a list with one empty block
   if((prevp = freep) == 0){
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
+  // scan through the free list
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    // if it's big enough
     if(p->s.size >= nunits){
-      if(p->s.size == nunits)
+      // if exactly the right size, remove from the list
+      if(p->s.size == nunits){
         prevp->s.ptr = p->s.ptr;
+      }
+      // split the free block by allocating the tail end
       else {
-        p->s.size -= nunits;
-        p += p->s.size;
+        p->s.size -= nunits;  // make the free block smaller
+
+        // Modify our copy of the free block's header "p"
+	// to make it represent the newly allocated block.
+	p += p->s.size;
         p->s.size = nunits;
       }
-      freep = prevp;
-      return (void*)(p + 1);
+      freep = prevp;  // change the start of the free list
+                      // to implement the "next fit" policy
+      return (void*)(p + 1);  // allocated chunk, past the header
+    }
+    // if we looped around to list start again, no blocks are big enough
+    if(p == freep) {
+      // ask the OS for another chunk of free memory
+      if((p = morecore(nunits)) == 0) {
+        return 0;  // the memory allocation failed
+      }
     }
-    if(p == freep)
-      if((p = morecore(nunits)) == 0)
-        return 0;
   }
 }
diff --git a/user/user.h b/user/user.h
index 2b68ee0..d47c82c 100644
--- a/user/user.h
+++ b/user/user.h
@@ -25,6 +25,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+void* shmem_access(int page_number);
+int shmem_count(int page_number); 
 
 // user library functions (ulib.c)
 int stat(char*, struct stat*);
diff --git a/user/usertests.c b/user/usertests.c
index 2586378..40f4c0e 100644
--- a/user/usertests.c
+++ b/user/usertests.c
@@ -9,12 +9,204 @@
 #define PAGE (4096)
 #define MAX_PROC_MEM (640 * 1024)
 
+#define USERTOP 0xA0000
+#define PGSIZE 4096
+
 char buf[2048];
 char name[3];
 char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };
 int stdout = 1;
 
 // simple file system tests
+//void 
+//partOneTest(void)
+
+  //int *ptr; 
+  //ptr = NULL;
+  //int c = *ptr; 
+  //printf(stdout, "Dereference of null pointer %d successful \n
+  
+void
+testPassed(void)
+{
+  printf(1, "....Passed\n");
+}
+
+void
+testFailed(void)
+{
+  printf(1, "....FAILED\n");
+}
+
+void expectedVersusActualNumeric(char* name, int expected, int actual)
+{
+  printf(1, "      %s expected: %d, Actual: %d\n", name, expected, actual);
+}
+
+void
+whenRequestingSharedMemory_ValidAddressIsReturned(void)
+{
+  printf(1, "Test: whenRequestingSharedMemory_ValidAddressIsReturned...");
+  char* sharedPage = shmem_access(0);
+  char* highestPage =       (char*)(USERTOP - PGSIZE);
+  char* secondHighestPage = (char*)(USERTOP - 2*PGSIZE);
+  char* thirdHighestPage =  (char*)(USERTOP - 3*PGSIZE);
+  char* fourthHighestPage = (char*)(USERTOP - 4*PGSIZE);
+  
+  if(sharedPage == highestPage ||
+     sharedPage == secondHighestPage ||
+     sharedPage == thirdHighestPage ||
+     sharedPage == fourthHighestPage) {
+    testPassed();
+  } else {
+    testFailed(); 
+  }
+}
+
+void
+afterRequestingSharedMemory_countReturns1()
+{
+  printf(1, "Test: afterRequestingSharedMemory_countReturns1...");
+  char* sharedPage = shmem_access(0);
+  int count = shmem_count(0);
+
+  if(count == 1) {
+    testPassed();
+  } else {
+    testFailed();
+    expectedVersusActualNumeric("'count'", 1, count);
+  }
+
+  // silence the error about unused variable
+  sharedPage = sharedPage + 0;
+}
+
+void
+whenSharingAPage_ParentSeesChangesMadeByChild()
+{
+  printf(1, "Test: whenSharingAPage_ParentSeesChangesMadeByChild...");
+  char* sharedPage = shmem_access(0);
+  sharedPage[0] = 42;
+
+  int pid = fork();
+  if(pid == 0){
+    // in child
+    char* childsSharedPage = shmem_access(0);
+    childsSharedPage[0] = childsSharedPage[0] + 1;
+    exit();
+  } else {
+    // in parent
+    wait(); // wait for child to terminate
+    if(sharedPage[0] == 43){
+      testPassed();
+    } else {
+      testFailed();
+      expectedVersusActualNumeric("'sharedPage[0]'", 43, sharedPage[0]);
+    }
+  }
+}
+
+void
+whenProcessExits_SharedPageIsFreed()
+{
+  printf(1, "Test: whenProcessExits_SharedPageIsFreed...");
+  int pid = fork();
+
+  if(pid == 0){
+    // in child
+    char* sharedPage = shmem_access(0);
+    sharedPage[0] = 42;
+    exit();
+  } else {
+    // in parent
+    wait();
+    char* parentsSharedPage = shmem_access(0);
+    if(parentsSharedPage[0] != 42){
+      testPassed();
+    } else {
+      // should be garbage value after being freed, but it's still 42
+      testFailed();
+      expectedVersusActualNumeric("'parentsSharedPage[0]'", 1, parentsSharedPage[0]);
+    }
+  }
+}
+
+void
+whenSharingAPageBetween2Processes_countReturns2()
+{
+  printf(1, "Test: whenSharingAPageBetween2Processes_countReturns2...");
+
+  char* sharedPage = shmem_access(0);
+  sharedPage = sharedPage + 0;  // silence unused variable error
+
+  int pid = fork();
+
+  if(pid == 0){
+    // in child
+    char* childsSharedPage = shmem_access(0);
+    childsSharedPage = childsSharedPage + 0;  // silence unused variable error
+
+    int count = shmem_count(0);
+    if(count != 2){
+      testFailed();
+      expectedVersusActualNumeric("'count'", 2, count);
+    }
+
+    exit();
+  } else{
+    // in parent
+    wait(); // wait for child to exit
+    int parentsCount = shmem_count(0);
+    if(parentsCount != 1){
+      testFailed();
+      expectedVersusActualNumeric("'parentsCount'", 1, parentsCount);
+    }
+  }
+
+  testPassed();
+}
+
+void
+whenProcessExists_countReturns0()
+{
+  printf(1, "Test: whenProcessExists_countReturns0...");
+
+  int pid = fork();
+
+  if(pid == 0){
+    // in child
+    char* sharedPage = shmem_access(0);
+    sharedPage = sharedPage + 0;  // silence unused variable error
+    exit();
+  } else {
+    // in parent
+    wait();
+    int count = shmem_count(0);
+
+    if(count != 0){
+      testFailed();
+      expectedVersusActualNumeric("'count'", 0, count);
+    } else {
+      testPassed();
+    }
+
+  }
+}
+
+void
+beforeRequestingSharedMemory_countReturns0()
+{
+  printf(1, "Test: beforeRequestingSharedMemory_countReturns0...");
+
+  int count = shmem_count(0);
+
+  if(count != 0){
+    testFailed();
+    expectedVersusActualNumeric("'count'", 0, count);
+  } else {
+    testPassed();
+  }
+}
 
 void
 opentest(void)
@@ -1461,7 +1653,6 @@ void
 bigargtest(void)
 {
   int pid;
-
   pid = fork();
   if(pid == 0){
     char *args[32+1];
@@ -1483,6 +1674,61 @@ bigargtest(void)
 int
 main(int argc, char *argv[])
 {
+	
+	int pid;
+
+  // we fork then run each test in a child process to keep the main process
+  // free of any shared memory
+  pid = fork();
+  if(pid == 0){
+    whenRequestingSharedMemory_ValidAddressIsReturned();
+    exit();
+  }
+  wait();
+  
+  pid = fork();
+  if(pid == 0){
+    afterRequestingSharedMemory_countReturns1();
+    exit();
+  }
+  wait();
+
+  pid = fork();
+  if(pid == 0){
+    whenSharingAPage_ParentSeesChangesMadeByChild();
+    exit();
+  }
+  wait();
+
+  pid = fork();
+  if(pid == 0){
+    whenSharingAPageBetween2Processes_countReturns2();
+    exit();
+  }
+  wait();
+
+  pid = fork();
+  if(pid == 0){
+    whenProcessExits_SharedPageIsFreed();
+    exit();
+  }
+  wait();
+
+  pid = fork();
+  if(pid == 0){
+    whenProcessExists_countReturns0();
+    exit();
+  }
+  wait();
+
+  pid = fork();
+  if(pid == 0){
+    beforeRequestingSharedMemory_countReturns0();
+    exit();
+  }
+  wait();
+  
+  /*
   printf(1, "usertests starting\n");
 
   if(open("usertests.ran", 0) >= 0){
@@ -1490,7 +1736,7 @@ main(int argc, char *argv[])
     exit();
   }
   close(open("usertests.ran", O_CREATE));
-
+  
   bigargtest();
   bsstest();
   sbrktest();
@@ -1520,8 +1766,15 @@ main(int argc, char *argv[])
   iref();
   forktest();
   bigdir(); // slow
-
+  
+  printf(stdout, "Starting part 1 test \n");
+  int *ptr;
+  ptr = NULL;
+  int c = *ptr;
+  printf(stdout, "Null pointer de-referenced %d", c);
   exectest();
 
+  printf(stdout, "Starting part 2 test \n"); */
+  
   exit();
 }
diff --git a/user/usys.S b/user/usys.S
index 8bfd8a1..1088afc 100644
--- a/user/usys.S
+++ b/user/usys.S
@@ -29,3 +29,5 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(shmem_access)
+SYSCALL(shmem_count)
\ No newline at end of file
